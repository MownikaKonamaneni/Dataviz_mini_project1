# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
knitr::opts_chunk$set(fig.width=1, fig.height=1)
#Load libraries
library(tidyverse)
library(ggplot2)
# Load data
marathon_data <- read_csv("D:/Masters/Sem3/Mini Project 1/data/marathon_results_2017.csv")
head(marathon_data)
colnames(marathon_data)[4] <- "M_F"
colnames(marathon_data)[19] <- "Official_Time"
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
# Create a histogram to visualize the age distribution of finishers
ggplot(marathon_data, aes(x = Age)) +
geom_histogram(aes(y = ..density..),
binwidth = 2,
fill = "green",
color = "black",
alpha = 0.3) +
geom_density(color = "red") +
labs(title = "Age Distribution of Finishers",
x = "Age",
y = "Count") +
theme_minimal()
# Create a histogram to visualize the age distribution based on gender
ggplot(marathon_data, aes(x = Age, fill = M_F)) +
geom_histogram(aes(y = ..density..), binwidth = 2, position = "identity", alpha = 0.5 ) +
geom_density(alpha = 0.3) +
labs(title = "Age Distribution based on Gender",
x = "Age",
y = "Density") +
guides(fill=guide_legend(title="M/F")) +
theme_minimal()
gender_group_counts <- marathon_data %>%
count(M_F)
#create bar chart
ggplot(gender_group_counts, aes(x=M_F, y=n, fill=M_F) ) +
geom_bar(stat="identity", show.legend = FALSE, width = 0.3) +
labs(title = "Gender-specific finishers", x = "Gender", y = "Count" ) +
theme_minimal()
# Group the data by country and calculate the average finishing time for each country
country_avg_time <- marathon_data %>%
group_by(Country) %>%
summarise(Avg_Time = mean(Official_Time))
# Sort the countries based on the average finishing time in ascending order
sorted_countries <- country_avg_time %>%
arrange(Avg_Time)
# Select the top 10 countries with the fastest runners
top_10_countries <- head(sorted_countries, 10)
# Create a bar plot for the top 10 countries with the fastest runners
ggplot(top_10_countries, aes(x = reorder(Country, Avg_Time) , y = Avg_Time )) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top 10 Countries with the Fastest Runners",
x = "Country",
y = "Average Finishing Time") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme_minimal()
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
knitr::opts_chunk$set(fig.width=1, fig.height=1)
#Load libraries
library(tidyverse)
library(ggplot2)
# Load data
marathon_data <- read_csv("D:/Masters/Sem3/Mini Project 1/data/marathon_results_2017.csv")
head(marathon_data)
colnames(marathon_data)[4] <- "M_F"
colnames(marathon_data)[19] <- "Official_Time"
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
# Create a histogram to visualize the age distribution of finishers
ggplot(marathon_data, aes(x = Age)) +
geom_histogram(aes(y = ..density..),
binwidth = 2,
fill = "green",
color = "black",
alpha = 0.3) +
geom_density(color = "red") +
labs(title = "Age Distribution of Finishers",
x = "Age",
y = "Count") +
theme_minimal()
# Create a histogram to visualize the age distribution based on gender
ggplot(marathon_data, aes(x = Age, fill = M_F)) +
geom_histogram(aes(y = ..density..), binwidth = 2, position = "identity", alpha = 0.5 ) +
geom_density(alpha = 0.3) +
labs(title = "Age Distribution based on Gender",
x = "Age",
y = "Density") +
guides(fill=guide_legend(title="M/F")) +
theme_minimal()
gender_group_counts <- marathon_data %>%
count(M_F)
#create bar chart
ggplot(gender_group_counts, aes(x=M_F, y=n, fill=M_F) ) +
geom_bar(stat="identity", show.legend = FALSE, width = 0.3) +
labs(title = "Gender-specific finishers", x = "Gender", y = "Count" ) +
theme_minimal()
# Group the data by country and calculate the average finishing time for each country
country_avg_time <- marathon_data %>%
group_by(Country) %>%
summarise(Avg_Time = mean(Official_Time))
# Sort the countries based on the average finishing time in ascending order
sorted_countries <- country_avg_time %>%
arrange(Avg_Time)
# Select the top 10 countries with the fastest runners
top_10_countries <- head(sorted_countries, 10)
# Create a bar plot for the top 10 countries with the fastest runners
ggplot(top_10_countries, aes(x = reorder(Country, Avg_Time) , y = Avg_Time )) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top 10 Countries with the Fastest Runners",
x = "Country",
y = "Average Finishing Time") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme_minimal()
# knitr::opts_chunk$set(fig.width=1, fig.height=1)
#Load libraries
library(tidyverse)
library(ggplot2)
# Load data
marathon_data <- read_csv("D:/Masters/Sem3/Mini Project 1/data/marathon_results_2017.csv")
head(marathon_data)
colnames(marathon_data)[4] <- "M_F"
colnames(marathon_data)[19] <- "Official_Time"
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
# Create a histogram to visualize the age distribution of finishers
ggplot(marathon_data, aes(x = Age)) +
geom_histogram(aes(y = ..density..),
binwidth = 2,
fill = "green",
color = "black",
alpha = 0.3) +
geom_density(color = "red") +
labs(title = "Age Distribution of Finishers",
x = "Age",
y = "Count") +
theme_minimal()
# Create a histogram to visualize the age distribution based on gender
ggplot(marathon_data, aes(x = Age, fill = M_F)) +
geom_histogram(aes(y = ..density..), binwidth = 2, position = "identity", alpha = 0.5 ) +
geom_density(alpha = 0.3) +
labs(title = "Age Distribution based on Gender",
x = "Age",
y = "Density") +
guides(fill=guide_legend(title="M/F")) +
theme_minimal()
gender_group_counts <- marathon_data %>%
count(M_F)
#create bar chart
ggplot(gender_group_counts, aes(x=M_F, y=n, fill=M_F) ) +
geom_bar(stat="identity", show.legend = FALSE, width = 0.3) +
labs(title = "Gender-specific finishers", x = "Gender", y = "Count" ) +
theme_minimal()
# Group the data by country and calculate the average finishing time for each country
country_avg_time <- marathon_data %>%
group_by(Country) %>%
summarise(Avg_Time = mean(Official_Time))
# Sort the countries based on the average finishing time in ascending order
sorted_countries <- country_avg_time %>%
arrange(Avg_Time)
# Select the top 10 countries with the fastest runners
top_10_countries <- head(sorted_countries, 10)
# Create a bar plot for the top 10 countries with the fastest runners
ggplot(top_10_countries, aes(x = reorder(Country, Avg_Time) , y = Avg_Time )) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top 10 Countries with the Fastest Runners",
x = "Country",
y = "Average Finishing Time") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme_minimal()
gender_group_counts <- marathon_data %>%
count(M_F)
#create bar chart
ggplot(gender_group_counts, aes(x=M_F, y=n, fill=M_F) ) +
geom_bar(stat="identity", show.legend = FALSE, width = 0.3) +
labs(title = "Gender-specific finishers", x = "Gender", y = "Count" ) +
theme_minimal()
#Load libraries
library(tidyverse)
library(ggplot2)
# Load data
marathon_data <- read_csv("data/marathon_results_2017.csv")
marathon_data
colnames(marathon_data)[4] <- "M_F"
colnames(marathon_data)[19] <- "Official_Time"
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
age_group_counts
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
# Create a histogram to visualize the age distribution of finishers
ggplot(marathon_data, aes(x = Age)) +
geom_histogram(aes(y = ..density..),
binwidth = 2,
fill = "green",
color = "black",
alpha = 0.3) +
geom_density(color = "red") +
labs(title = "Age Distribution of Finishers",
x = "Age",
y = "Count") +
theme_minimal()
# Create a histogram to visualize the age distribution based on gender
ggplot(marathon_data, aes(x = Age, fill = M_F)) +
geom_histogram(aes(y = ..density..), binwidth = 2, position = "identity", alpha = 0.5 ) +
geom_density(alpha = 0.3) +
labs(title = "Age Distribution based on Gender",
x = "Age",
y = "Density") +
guides(fill=guide_legend(title="M/F")) +
theme_minimal()
gender_group_counts <- marathon_data %>%
count(M_F)
#create bar chart
ggplot(gender_group_counts, aes(x=M_F, y=n, fill=M_F), size = ) +
geom_bar(stat="identity", show.legend = FALSE, width = 0.3) +
labs(title = "Gender-specific finishers", x = "Gender", y = "Count" ) +
theme_minimal()
# Group the data by country and calculate the average finishing time for each country
country_avg_time <- marathon_data %>%
group_by(Country) %>%
summarise(Avg_Time = mean(Official_Time))
# Sort the countries based on the average finishing time in ascending order
sorted_countries <- country_avg_time %>%
arrange(Avg_Time)
# Select the top 10 countries with the fastest runners
top_10_countries <- head(sorted_countries, 10)
# Create a bar plot for the top 10 countries with the fastest runners
ggplot(top_10_countries, aes(x = reorder(Country, Avg_Time) , y = Avg_Time )) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top 10 Countries with the Fastest Runners",
x = "Country",
y = "Average Finishing Time") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme_minimal()
#Load libraries
library(tidyverse)
library(ggplot2)
# Load data
marathon_data <- read_csv("D:/Masters/Sem3/Mini Project 1/data/marathon_results_2017.csv")
head(marathon_data)
colnames(marathon_data)[4] <- "M_F"
colnames(marathon_data)[19] <- "Official_Time"
# calculate the count of finishers by age group
age_group_counts <- marathon_data %>%
count(Age)
# Create a bar plot using ggplot
ggplot(age_group_counts, aes(x = Age, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Number of Finishers by Age Group",
x = "Age Group",
y = "Count") +
theme_minimal()
# Create a histogram to visualize the age distribution of finishers
ggplot(marathon_data, aes(x = Age)) +
geom_histogram(aes(y = ..density..),
binwidth = 2,
fill = "green",
color = "black",
alpha = 0.3) +
geom_density(color = "red") +
labs(title = "Age Distribution of Finishers",
x = "Age",
y = "Count") +
theme_minimal()
# Create a histogram to visualize the age distribution based on gender
ggplot(marathon_data, aes(x = Age, fill = M_F)) +
geom_histogram(aes(y = ..density..), binwidth = 2, position = "identity", alpha = 0.5 ) +
geom_density(alpha = 0.3) +
labs(title = "Age Distribution based on Gender",
x = "Age",
y = "Density") +
guides(fill=guide_legend(title="M/F")) +
theme_minimal()
gender_counts <- as.data.frame(table(marathon_data$M_F, deparse.level = 0))
# Calculate the percentage and absolute count for each category
gender_counts$percent <- round(gender_counts$Freq/sum(gender_counts$Freq) * 100, 1)
gender_counts$gender = paste(gender_counts$Var1," (", gender_counts$percent,"%)", sep = "")
#create pie chart
ggplot(gender_counts, aes(x="", y=Freq, fill=gender)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
geom_text(aes(label = gender), position = position_stack(vjust = 0.5), color = "white") +
labs(title = "Gender-specific finishers") +
scale_fill_discrete(name = "M/F", labels = c("F", "M")) +
theme_void()
# Group the data by country and calculate the average finishing time for each country
country_avg_time <- marathon_data %>%
group_by(Country) %>%
summarise(Avg_Time = mean(Official_Time))
# Sort the countries based on the average finishing time in ascending order
sorted_countries <- country_avg_time %>%
arrange(Avg_Time)
# Select the top 10 countries with the fastest runners
top_10_countries <- head(sorted_countries, 10)
# Create a bar plot for the top 10 countries with the fastest runners
ggplot(top_10_countries, aes(x = reorder(Country, Avg_Time) , y = Avg_Time )) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top 10 Countries with the Fastest Runners",
x = "Country",
y = "Average Finishing Time") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme_minimal()
